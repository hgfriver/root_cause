from GenerateCleanCurve import GenerateCleanCurvefrom GenerateNoise import GenerateNoisefrom DetermineWhichProblem import DetermineWhichProblemimport randomimport matplotlib.pyplot as pltimport numpy as npcsv_number = 10degree_of_random = 10for times in range(csv_number):        a = GenerateCleanCurve()    x,yA,yB,yC,yD,yE = a.generate(degree_of_random) #parameter: degree of radom    q = DetermineWhichProblem()    who_have_problem, random_series = q.run()    print(who_have_problem)            for who in who_have_problem:                b = GenerateNoise()        types = random.randint(1, 6)            Peak = b.generate(types) #return Peak                if who == 'A':            yA = yA + Peak            print('A:',types)                    elif who == 'B':            yB = yB + Peak            print('B:',types)                    elif who == 'C':            yC = yC + Peak            print('C:',types)                    elif who == 'D':            yD = yD + Peak            print('D:',types)                    elif who == 'E':            yE = yE + Peak            print('E:',types)    plt.clf()    plt.scatter(x,yA,label ='para A')    plt.scatter(x,yB,label ='para B')    plt.scatter(x,yC,label ='para C')    plt.scatter(x,yD,label ='para D')    plt.scatter(x,yE,label ='para E')        plt.title('recipe')    plt.legend()         plt.show()    plt.clf()        A = random_series[0]    B = random_series[1]    C = random_series[2]    D = random_series[3]    E = random_series[4]        defect1 = A    defect2 = A and B    defect3 = A and C    defect4 = A and D and E    defect5 = B    defect6 = B and D    defect7 = E    defect8 = A and E    defect9 = B and D    defect10 = C                print("defect1: ", defect1)    print("defect2: ", defect2)    print("defect3: ", defect3)    print("defect4: ", defect4)    print("defect5: ", defect5)    print("defect6: ", defect6)    print("defect7: ", defect7)    print("defect8: ", defect8)    print("defect9: ", defect9)    print("defect10: ", defect10)                defect1 += 0*x    defect2 += 0*x    defect3 += 0*x    defect4 += 0*x    defect5 += 0*x    defect6 += 0*x    defect7 += 0*x    defect8 += 0*x    defect9 += 0*x    defect10 += 0*x                a = np.asarray([x,yA, yB, yC, yD, yE, defect1, defect2, defect3, defect4, defect5, defect6, defect7, defect8, defect9, defect10   ])    new_a = np.transpose(a)        header = ["time stamp"] + ["yA"]+ ["yB"]+ ["yC"]+ ["yD"]+ ["yE"]+["defect1"]+["defect2"]+["defect3"]+["defect4"]+["defect5"]+["defect6"]+["defect7"]+["defect8"]+["defect9"]+["defect10"]    columns_name = ",".join(header)     np.savetxt('sample'+str(times)+'.csv', new_a, delimiter="," ,header=columns_name, fmt='%f')            